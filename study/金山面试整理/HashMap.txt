HashMap 融合了数组的随机访问的优点，又有链表增加删除的优点
感觉它最核心也是最厉害的地方就在于计算哈希值的算法
通过计算哈希值后确定了数据的存储位置，这里可能命中不到，出现哈希冲突。
有很多种解决哈希冲突的方法，比如采用数组加链表的形式
当计算出的地址已经有数据的话，则用链表的形式插入到这个数据后面
还有个什么线性探测法，就是如果命中不到一个空槽的话，则继续遍历下一个，直到找到一个空槽来装数据
在java里面的HashMap好像是用这个链表地址法

如何计算hashcode：这个我没有做深入的了解，但是看java的hashCode方法的实现是按照不同的基础类型来计算的。

DK 1.8中：当单个桶中元素个数大于等于8时，链表实现改为红黑树实现；当元素个数小于6时，变回链表实现。由此来防止hashCode攻击。


